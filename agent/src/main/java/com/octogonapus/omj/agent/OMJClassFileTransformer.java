/*
 * This file is part of OMJ.
 *
 * OMJ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OMJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OMJ.  If not, see <https://www.gnu.org/licenses/>.
 */
package com.octogonapus.omj.agent;

import java.io.PrintWriter;
import java.lang.instrument.ClassFileTransformer;
import java.security.ProtectionDomain;
import java.util.regex.Pattern;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.util.TraceClassVisitor;

public final class OMJClassFileTransformer implements ClassFileTransformer {

  private final DynamicClassDefiner dynamicClassDefiner;

  public OMJClassFileTransformer(final DynamicClassDefiner dynamicClassDefiner) {
    this.dynamicClassDefiner = dynamicClassDefiner;
  }

  @Override
  public byte[] transform(
      final ClassLoader loader,
      final String className,
      final Class<?> classBeingRedefined,
      final ProtectionDomain protectionDomain,
      final byte[] classfileBuffer) {
    System.out.println("OMJClassFileTransformer.transform");
    System.out.println(
        "loader = "
            + loader
            + ", className = "
            + className
            + ", "
            + "classBeingRedefined = "
            + classBeingRedefined
            + ", "
            + "protectionDomain = "
            + protectionDomain);

    // Check the include and exclude class filters as to whether we should transform this
    // class. We need to check this here so that we can return `null` to obey `transform`'s
    // contract.
    final Pattern includeFilter = Pattern.compile("com/octogonapus/[a-zA-Z]*");
    final Pattern excludeFilter = Pattern.compile("com/octogonapus/omj/[a-zA-Z]*");
    final boolean shouldAdapt =
        includeFilter.matcher(className).matches() && !excludeFilter.matcher(className).matches();

    if (shouldAdapt) {
      try {
        // If transformClassBytes throws an exception, then the class will silently not
        // be transformed. This is very hard to debug, so catch anything it throws and
        // explode.
        return transformClassBytes(classfileBuffer);
      } catch (Throwable ex) {
        ex.printStackTrace();
        System.exit(1);
        return null;
      }
    } else {
      // Return `null` if we won't transform this class to obey the contract.
      return null;
    }
  }

  public byte[] transformClassBytes(final byte[] classfileBuffer) {
    final var classReader = new ClassReader(classfileBuffer);

    // Add a `TraceClassVisitor` to print the generated bytecode to System.out for debugging.
    final var classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    final var trace = new TraceClassVisitor(classWriter, new PrintWriter(System.out));

    classReader.accept(new OMJClassAdapter(Opcodes.ASM8, trace, dynamicClassDefiner), 0);
    return classWriter.toByteArray();
  }
}
